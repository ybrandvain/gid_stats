# Welcome to R Bootcamp

```{r}
#| echo: false
#| message: false
#| warning: false
library(webexercises)
library(htmltools)
library(knitr)
```

::: callout-tip
## Other helpful resources

1.  [An Introduction to R](https://cran.r-project.org/doc/manuals/R-intro.pdf). (@venables2024)
2.  [R Reference Card](https://cran.r-project.org/doc/contrib/Baggott-refcard-v2.pdf) (@baggott2012).\
3.  [Getting Started with R: An Introduction for Biologists](https://academic.oup.com/book/27290) (@beckerman2017).\
:::

::: {.goals style="background-color: #e6fcff; padding: 10px; border: 1px solid #ddd; border-radius: 5px;"}
**In this chapter we will:**

1.  **Discuss what R is and why to use R.**
    -   Understand what makes R a powerful tool for data analysis and why it’s popular among biologists and data scientists.\
2.  **Open R and give it a try.**
    -   Dive into the `R` environment with simple commands and basic tasks to get started.\
3.  **Take a look into your R future.**
    -   Preview how learning `R` will prepare you for more advanced topics in statistical modeling.\
:::

------------------------------------------------------------------------


## What is `R` and why you should use it

```{r}
#| echo: false
#| column: margin 
#| label: fig-experience
#| fig-cap: "The `R` logo!"
include_graphics("images/r.jpeg")
```



`R` is a computer language and environment for statistical computing & graphics. It is script-based (text computer code) and not GUI-based (not point and click with menus).

-   `R` is open-source and free.\
-   `R` is excellent for data manipulation, visualization, and modeling.
-   `R` allows for reproducible research in a single script.
-   `R` Widely used in academia and industry.
-   `R`'s powers can be extended by many packages built for statistical and data science tasks.

### When to use `R`

Many of you have likely used Excel previously. Excel is a fine tool for entering and storing data, but it is less useful for analyzing large datasets, makes it difficult to conduct sophisticated statistical analyses, and does not facilitate reproducible analyses. R, on the other hand, allows for scalability, reproducibility, and customization—three things essential for modern data analysis. In summary:

-   Excel is intuitive and good for data entry, as it provides a familiar spreadsheet interface, user-friendly tools for formatting and organizing data, and straightforward options for basic calculations.
-   R handles big data, advanced statistics, and custom visualizations much better. For instance, R can seamlessly analyze datasets with millions of rows, run advanced statistical models, and create high-quality visualizations (@fig-Ruse).

```{r}
#| label: fig-Ruse
#| column: body
#| fig-cap: "We use `R` all the time!"
#| echo: false
include_graphics("images/usingR.png")
```

### `R`'s core strengths

R’s core strengths lie in its extensive capabilities for statistical analysis and modeling. Virtually every common statistical technique is available through free, community-contributed packages, making it a highly versatile tool for data analysis. R offers a comprehensive set of statistical techniques, including classical tests, linear and nonlinear modeling, time-series analysis, classification, cluster analysis, spatial statistics, and Bayesian methods.

Because `R` is script-based and has so many capabilities, two incredible benefits emerge from using R (as compared to say Excel or jump).

1.  `R` allows start-to-end reproducibility of your research all in a single script!\
2.  `R` makes it easy to revise and re-run analyses.
    -   **Rule of thumb:** every analysis must be redone 10–15 times. Plan accordingly.

```{r}
#| echo: false
#| column: body 
#| label: fig-benefits
#| fig-cap: "Two benefits of using `R`. **A)** You can have your complete analysis in one place. **B)** You can easily change something about your analysis without needing to *redo* everything."
include_graphics("images/Rbenefits.png")
```

## Getting started with `R`

```{r}
#| echo: false
#| column: margin 
#| label: fig-learnR
#| fig-cap: "The best way to learn `R` is to use `R`."
include_graphics("images/rUse.png")
```

Learning R is like learning a new language!!! The best way to learn it is by immersion. Our basic philosophy for learning `R` goes as follows:

1.  **Learn basic functionality of R!**
2.  Gain comfort with the logic of R
    -   Get ok with not knowing, makign mistakes, asking for help, and not having "the best" solution .\
3.  Learn to solve common issues in R code
4.  Layer on new coding concepts
5.  Practice on real data until it doesn’t feel like a foreign land

### Installing and Opening R.

Before you can use `R` you must download and install it$^*$. [$^*$ **This is not strictly true.** You can use `R` online via [posit cloud](https://posit.cloud/). This is a "freemium" service and the free plan is unlikely to meet your needs.]{.column-margin}

1.  Download and install `R` from [CRAN](https://www.r-project.org/).
    -   See [Roger Peng]((https://rdpeng.org/))'s tutorial on installing `R` [on a mac](https://youtu.be/uxuuWXU-7UQ) or [on a PC](https://www.youtube.com/watch?v=Ohnk9hcxf9M).\
2.  Open the standalone R program (not RStudio).
3.  Familiarize yourself with the command prompt `>`.

Think of the R command prompt as your interactive workspace. It awaits your instructions, providing immediate feedback on calculations and commands (@fig-rscreen).

```{r}
#| label: fig-rscreen
#| fig-cap: "The R screen."
#| column: body
#| echo: false
include_graphics("images/rscreen.png")
```

## R as a calculator

### R as a simple calculator

```{r}
#| label: fig-rcalc
#| fig-cap: "Using `R` as a calculator."
#| column: margin
#| echo: false
include_graphics("images/rcalc.png")
```

We first introduce R as a simple calculator (@fig-rcalc). We do so because these simple operations help us understand how R works and simple things that can easily go wrong. sing R as a calculator introduces you to its syntax and logic, paving the way for more complex tasks. Every operation you perform here builds your comfort with the language.

Here are some basic mathematical operations in `R`:

```{r}
#| eval: false
2 + 2        # Addition
4 * 2        # Multiplication
(2 + 3) * 4  # Parentheses for precedence
3^2          # Exponents
2 / 10000    # Small numbers in scientific notation
5e3          # Large numbers in scientific notation
```

::: {.callout-note collapse="true"}
## R does not (usualy) "see" whitespace

So, all of these ways of writing "*four times two*" all return eight:

```{r}
4 * 2 
4 *2 
4 *      2 
```
:::

::: {.goals style="background-color: #FFD580; padding: 10px; border: 1px solid #ddd; border-radius: 5px;"}
**Practice: R as a simple calculator**

**Q1)** Which of the following correctly asks R to calculate 9 + 2? (note: two of the options are correct) `r longmcq(c(answer = "9+2", "9+1", answer = "9 +2", "nine + 2"))`

**Q2)** Which of the following correctly asks R to calculate seven times eight hundred thousand? (note: two of the options are correct) `r longmcq(c("7 x 800000", answer = "7 * 800000",  "7 * 800,000",answer =  "7 * 8e5"))`

**Q3)** Which of the following correctly asks R to calculate $( \frac{1+3}{3+4} ) ^2$? `r longmcq(c("(1+3)/(3+4)^2", "(1+3/3+4)^2", answer = "((1+3)/(3+4))^2"))`
:::

### R as a fancy calculator

So why boot up `R` instead of opening your phone for calculations? `R` can do so much more. Let us start with two of `R`'s capabilities that make it a fancy calculator:

1.  `R` can store objects.\
2.  `R` can use functions.

#### R objects {.unnumbered}

A powerful feature of `R` is that you can create objects and then dothings with these objects. [$^*$ **An `R` object** is any type of data stored in R.]{.column-margin} We first introduce an object as a simple number, but objects can be just about anything -- a map, a genome, a vector etc...

```{r}
#| column: margin
# Variable assignment in R
x <- 1
2 * x
```

**Assignment in `R`:** We create `R` objects with the assignment operator `<-`. So, for example to assign the number one to the object, `x`, we type `x<-1`. We can then perform simple math on this object.

```{r}
#| column: margin
# Doing stuff with objects
x <- 1
y <- 4
z <- 3
(x - y)^z
```

::: {.callout-note collapse="true"}
## The assignment operator `<-` vs the equals sign `=`.

You may see people type `=` instead of `<-` for assignment. This will *almost always* work out just fine, but we suggest you do not do this for two reasons.

1.  **Respecting R style:** Using the standard `R` style will increase reader's faith iun your `R` skills, and will make your code easier for people familiar with `R` to read.\
2.  **Rare cases where it matters:** There are vary few cases where `R` willgive you surprising results if you use `=` dor assignemnt. Better to just never do this, so you don't waste days of your life chasing down some obscure error.
:::

##### Naming objects {.unnumbered}

`R` has a few rules for naming objects. Namely

-   `R` does not allow spaces in names (e.g. `my number <-1` will not work).
-   `R` does not allow dashes in names (e.g. `my-number <-1` will not work).
-   `R` does not allow names to start with numbers (e.g. `1number <-1` will not work).
-   `R` does not allow names to be special `R` values (e.g. `Inf <- 1`, `NaN <- 1`, `NA <- 1`, `TRUE <- 1`, `FALSE <- 1`, and `NULL <- 1` will not work).

##### Working memory {.unnumbered}

```{r}
#| column: margin
# Remove z from working memory
rm(z) 
# See if z is still there
ls() 
```

```{r}
#| column: margin
# Remove everything from working memory
rm(list = ls())
# See if it worked
ls() 
```

Once you create a variable in `R`, it gets stored in *working memory*, meaning you can use it anytime during your session. However, be careful—if you accidentally reuse or overwrite a variable name, it could cause errors or confusion in your code.

-   To see what’s currently in your working memory, just type `ls()`.\
-   To remove a variable from working memory type `rm(VAR_NAME)`.\
-   To remove everything from working memory type `rm(list = ls())`
    -   This can be a good thing to do when you start a new `R` session.\
    -   But be carefull not to delete important things from your `R`, or others.

#### **Vectorized operations** {.unnumbered}

`R` is built on vectors! Vectors are an ordered sequence of values and therefore vectors allow you to work with collections of values simultaneously. They simplify operations and enhance code efficiency.

**Creating Vectors:** Use the concatenate function `c()` to make a vector

```{r}
c(1, 2, 5, 10)  # Combine values into a vector
```

**Doing stuff with vectors:** We can assign vector to objects, and math them

```{r}
# Assign a vector to an object
a <- c(1, 2, 5, 10) # Assign a vector to an object
a + 1               # Add a constant to each element
2 * a               # Multiply each element by a scalar

b <- c(1, 2, 3, 4)  # Make another vector
b * a               # Element-wise multiplication
b * a               # Element-wise addition
```

::: {.vectorpractice style="background-color: #FFD580; padding: 10px; border: 1px solid #ddd; border-radius: 5px;"}
**Practice: Vectorized operations**

```{r}
#| echo: false
#| column: margin
include_graphics("images/grape_leaf.png")
```

You collected five leaves of the wild grape (Vitis riparia) and measured their length and width. You have a table of lengths and widths of each leaf and you want to calculate each leaf's area.

```{r}
#| echo: false
kable(data.frame(leaf = 1:5,
                 length = c(5, 6.1, 5.8, 4.9, 6),
                 width = c(3.2, 3, 4.1, 2.9, 4.5)) |>t())
```

You read that the area of a grape leaf is $$\text{leaf area } = 0.851 \times \text{ leaf length } \times \text{ leaf width}$$

Given this equation, write some R code to calculate the area of the five leaves.

`r hide('Show a Hint')`

-   First make vectors for length and width.\
-   Then multiply these vector by each other and 0.851.

`r unhide()`

`r hide('Show the Solution')`

```{r solution}
# Create length and width vectors
length <- c(5, 6.1, 5.8, 4.9, 6)
width <- c(3.2, 3, 4.1, 2.9, 4.5)

# find area
0.851 * length * width
```

`r unhide()`
:::

## R built-in data sets

`R` has numerous built-in datasets which you can use as a playground for practicing your skills. They offer a diverse range of data types and structures to explore. To see all the data sets available, tpye `help(package = "datasets")`.

Let's look at one simple data set, `islands`, which contains rhe areas in thousands of square miles of the landmasses which exceed 10,000 square miles. Type [`help(islands)`](https://rdrr.io/r/datasets/islands.html) to learn more.

```{r}
islands  # Example dataset
```

## R Functions

`R` allows you to use functions to complete more sophisticated operations than simple math (but we will start off with simple math as a demonstration).

### Built-in functions

```{r}
#| column: margin
log(10)    # Natural log
sqrt(25)   # Square root

# Apply a function to a vector
mean(islands)
```

R has many useful built in functions. These range from standard math (`mean`, `sd`, etc) to statistical operations (`t.test()`) and beyond. Functions are the workhorses of R, encapsulating logic to perform specific tasks. They save time and ensure consistency across your analyses.

Functions take arguments that we put inside parentheses. So, for example. we find the square root of 25 as `sqrt(25)`. Here the function is `sqrt` and the argument is `25`. We can also apply functions to vectors, like `island`.

#### Functions can take `>1` argument {.unnumbered}

**Optional arguments:**\
Some functions take more than one argument. Sometimes these can be optional arguments (in which `R` assumes a value). For example:

-   `log(100)` assumes we want the natural log and returns `r log(100) |> round(digits = 3)`.\
-   If you want log base ten, write: `log(100, 10)`, which returns `r log(100,10)`.

**Argument order and argument names:**

-   `R` assumes that your arguments come in a specified order, so `log(10, 100)` and `log(100, 10)` return different things:
    -   `log(10, 100)`: `r log(10, 100)`\
    -   `log(100, 10)`: `r log(100, 10)`\
-   You can use argument names (predefined by `R`) to clarify your code and allow arguments to be entered in any order:
    -   `log(100, base = 10)`: `r log(100, base = 10)`\
    -   `log(base = 10, 100)`: `r log(base = 10, 100)`

::: callout-warning
## Use `=` to assign arguments in functions.

When giving an argument a temporary value inside a function always use `=` and not the assignment operator. Otherwise, `R` will accidentally store this in working memory and bad things will happen.
:::

::: {.functionpractice style="background-color: #FFD580; padding: 10px; border: 1px solid #ddd; border-radius: 5px;"}
**Practice: Using functions**

**Q4)** Which of the following is a **correct way** to have R find the $log_{10}$ value of five cubed? `r longmcq(c("log(10,5^3)", "log(5^3)",answer = "log(5^3,10)"))`

**Q5)** Which of the following is a **wrong way** to ask R to round the square root of thirty to the third decimal place? `r longmcq(c(answer = "round(3,sqrt(30))", "sqrt(30) |> round(digits = 3)","round(sqrt(30),digits = 3)",  "round(30^(1/2),digits = 3)"))`
:::

### Getting help

`R` has more built-in functions than anyone can commit to memory, and you will not know all of them, let alone how to use them all. Of course, with practice, you will get pretty familiar with the ones you use most, but you will keep suing new functions. **So you will need help**.

There are many great ways to get help. We list them in order of how well they assist you in building independence. We suggest trying them in the order we list, as that will help you imporve your R skills fastest!

1.  **Learn how to use the help file:** typing `help(FUNCTION NAME)` eg `help(mean)` will return a document that looks like [this](https://stat.ethz.ch/R-manual/R-devel/library/base/html/mean.html). **Making sense of these help files is a skill, and requires practice**. The help file includes:
    -   `Usage` of the function.\
    -   `Arguments` the function takes.\
    -   `Values` it returns.\
    -   `Examples` of using the function.\
2.  **Look for a previous example:** You can find previous usage in your own code, in a book, or online (google is great).\
3.  **Ask a friend for help:** FYou are each others greatest resources. Help each other. When you help, make sure you treat your peers with respect - we are all learning!\
4.  **Use an LLM:** Most large language models are pretty good at `R` and will solve your problem and explain the solution. However, they cannot solve everything and sometimes do things in weird ways. Building up expertise before relying on LLMs will really pay off!

### Combining functions

```{r}
#| column: margin
# The log of square root of 25 
# Rounded to 3 digits, Nested
round(sqrt(log(25)), digits = 3)
```

```{r}
#| column: margin
# Piping the same thing as above

log(25) |> 
  sqrt()|>
  round(digits =3) 
```

Say you want to know the log of the square root of twenty five. You can find this by.

-   Nesting the functions: `log(sqrt(25)):` `r log(sqrt(25)) |> round(digits =5)`.
-   Piping the functions: `sqrt(25) |> log():` `r sqrt(25) |> log() |> round(digits =5)`. Piping can be easier to follow for many combined operations (compare code on right).

### Creating Your Own Function

If you find yourself doing the same thing a bunch of times, and `R` does not have a built-in function you can write your own. In geenral, they look like this:

```         
thisFunction <- function(arg1) {
  new_thing <- output of a abunch of stuff based on arguments
  return(new_thing)
}
thisFunction (arg1)  # Use the custom function
```

```{r}
#| column: margin
# Writing our own function
# To find the standard error 
se <- function(my_data){
  my_sd <- sd(my_data)
  my_n  <- length(my_data)
  my_se <- my_sd / sqrt(my_n)
  return(my_se)
}

# Standard error of island area
se(islands)
```

For some reason, `R` does not have a function to find the standard error (which equals the standard deviation divided by the square root of sample size). We can write this ourselves (See example on the right)

## R Scripts

An `R` script is a text file containing R commands. Scripts act as a record of your work, ensuring that your analyses are transparent and repeatable. They also allow you to refine and adapt your approach as your project evolves.

#### Creating Your First Script {.unnumbered}

1.  Open a new script: File \> New Document.\
2.  Write and run:

```{r}
#| eval: false
# Your name here
# The data here

# Here I aim to write a function that 
  # Takes a vector
  # Calculates the mean, sd, n and se
  # Returns this as a vector

summaryFunction <- function(my_vector){
  my_mean <- mean(my_vector)              # Calculate mean
  my_sd   <- sd(my_vector)                # Calculate sd
  my_n    <- length(my_vector)            # Find sample size
  my_se   <- my_sd/sqrt(my_n)             # Find sample size
  return(c(mean = my_mean, sd = my_sd, n = my_n , se = my_se) )
}

summaryFunction(islands)
```

3.  Save as `myfirstscript.R`.

By saving your work in a script, you create a reusable resource that allows you to pick up work were you let off, save work with collaborators and improve/refine analyses over time.

::: callout-note
## Running commands in an `R` script

`R` does not read your R script until you tell it to. So you must enter your script into `R`'s working memory. To do this put your curser on the line of code you want to execute, press: <CMD enter> on mac or \<Ctrl+R\> on PC, or copy and paste directly into the R console and run he code.
:::

#### Commenting your code {.unnumbered}

Code comments are bits of a script that the computer does not read. In `R` we use the `#` sign to comment our code. Comments are very useful, and serve many purposes including:\
- Document the purpose of the code. – Make your code understandable for others. – Notes for your future self.\
- you may remember nothing about the code when you look at it next week or year!\
– Pseudocode- writing out what you want to do in words first, then filling in code.

## Common `R` mistakes

When coding in `R` (or any language) you are bound to make mistakes. Mistakes happen, even to the best pogrammers. Don't let them discourage you!

Here are two common mistakes to watch out for:

```{r}
#| label: fig-resc
#| fig-cap: "Watch out for incomplete commands! A `+` that you did not enter is a giveaway. Complete the command or hit escape to remedy this."
#| column: margin
#| echo: false
include_graphics("images/resc.png")
```

#### **Common `R` mistakes: Incomplete commands** {.unnumbered}

Incomplete commands such as not completing a mathematical operation (e.g. `5 *`) or mismatched parentheses (e.g. `2 * (1 + 3`).\
- If you type in an incomplete command, R will wait for you to complete it (@fig-resc).\
- If you want to cancel a command you can simply hit "Esc" and `R` (or RStudio) will give you back the "`>`" prompt!

#### **Common `R` mistakes: Entering the wrong thing** {.unnumbered}

```{r}
#| error: true
#| column: margin
# Make sure you typed 
# what you meant to type!
2 + 2O # Thats the letter O.
```

The problem with coding is that computers always do what you tell them to.

###### **Common `R` mistakes: C0nfu5ing 13tt3r5 for num63r5** {.unnumbered}

So, for example, make sure that your 0s are not Os. Strings (text) cannot be used in math (except certain characters like `5e3`). You can fix this by typing `2 + 20`, which reassuringly, returns `22`.

###### **Common `R` mistakes: WrONg CAsE** {.unnumbered}

Similarly, because `R` is case sensitive, make sure you type he name of your objects with the same capitalization as you saved them.

```{r}
#| column: margin
#| error: true
# Watch out for inconsistent 
# capitalization! 
x <- 1
2 * X
```

###### **Common `R` mistakes: Wrong.connectors** {.unnumbered}

Say you want a two-part name like `my_variable`. We have seen above that spaces are not allowed in `R` assignment, so we cannot call it `my variable`. but we have numerous options:

-   `my_variable`
-   `my.variable`\
-   `myvariable`\
-   `myVariable`

None of these are inherently righter than another, but it is best to develop a consistent `R` style for yourself.

::: callout-tip
## Use style guides.

It is even better to use a standard [`R` style guide](https://web.stanford.edu/class/cs109l/unrestricted/resources/google-style.html) so that your readers and collaborators can pick up your code easily!
:::

#### **Things in the wrong order: Common `R` mistakes** {.unnumbered}

`R` does not see what is in your script until you run it and enter it into working memory. So code like this will not work

```{r}
#| error: true
round(log_10)
log_10 <- log(10)
```

::: callout-warning
## It worked does not mean it will work next time

A common mistake is that your script does not follow the order of your code. So your script may look like this and it will return the right thing.

```{r}
#| echo: false
log_10 <- log(10)
```

```{r}
#| eval: false
round(log_10, digits = 3)
log_10 <- log(10)
```

```{r}
#| echo: false
round(log_10, digits = 3)
```

You then restart `R` and it no longer works. That is because you entered `log_10 <- log(10)` somewhere in your memory.

For this reason, **make sure that your code works as expected after removing everything from `R`'s memory**!
:::

## Advice for leanring `R`

**Some Useful Advice for Learning R**

1.  **Don’t worry—you’ve got this!**\
    It's okay to feel overwhelmed or frustrated at times. Remember, every expert was once a beginner. Progress might feel slow, but every step you take builds a solid foundation. Celebrate small victories and trust in your ability to learn and grow.

2.  **Learning R is like learning a language.**\
    Just like learning a new language, mastering R involves understanding both the "vocabulary" (functions, commands, and syntax) and the "grammar" (the logical structure behind how code works). It takes practice, patience, and persistence. Be kind to yourself and take it one concept at a time.

3.  **You don’t have to be fluent to be effective.**\
    You can achieve amazing things in R without knowing every detail. Start with simple tasks and gradually expand your skills. Focus on solving real problems—your understanding will grow naturally as you encounter new challenges.

4.  **Even experienced programmers use Google all the time.**\
    Programming isn't about memorizing everything; it's about knowing how to find and apply the right resources. Stack Overflow, R documentation, and community forums are your friends. Every question you look up is an opportunity to learn something new.

5.  **Mistakes are part of the process.**\
    Error messages aren't failures—they're clues. Debugging is an essential skill for every programmer, and it’s how you learn the most. Approach errors with curiosity: What is this trying to tell me? How can I fix it?

6.  **Break big tasks into small steps.**\
    When you're faced with a complex problem, start by tackling one part at a time. Simplify and build from there. Small, steady progress is much more sustainable—and rewarding—than trying to do everything at once.

7.  **Experiment and explore.**\
    R is a playground for creativity. Try new functions, test your hypotheses, and don't be afraid to break things. The best way to learn is by doing, even if the first few attempts don't work perfectly.

::: {.functionlist style="background-color: #FFFFCC; padding: 10px; border: 1px solid #ddd; border-radius: 5px;"}
## New `R` functions {.unnumbered}

-   [**`help()`**](https://rdrr.io/r/utils/help.html): Displays help documentation for a specific function or dataset, taking the name of the function or dataset as an argument.

-   [**`mean()`**](https://rdrr.io/r/base/mean.html): Computes the arithmetic mean of a numeric vector, with optional arguments for trimming and handling missing values.

-   [**`sd()`**](https://rdrr.io/r/stats/sd.html): Calculates the standard deviation of a numeric vector, with an optional argument to remove missing values.

-   [**`sqrt()`**](https://rdrr.io/r/base/sqrt.html): Returns the square root of a number or each element of a numeric vector.

-   [**`log()`**](https://rdrr.io/r/base/log.html): Computes logarithms with an optional argument to specify the base.

-   [**`ls()`**](https://rdrr.io/r/base/ls.html): Lists the objects in the current R environment.

-   [**`rm()`**](https://rdrr.io/r/base/rm.html): Removes specified objects from the R environment, with an optional argument to list objects.

-   [**`c()`**](https://rdrr.io/r/base/c.html): Combines values into a vector or list.

-   [**`round()`**](https://rdrr.io/r/base/round.html): Rounds numeric values to a specified number of decimal places.

-   [**`length()`**](https://rdrr.io/r/base/length.html): Returns the number of elements in an object.
:::

------------------------------------------------------------------------

::: {.definitionlist style="background-color: #FFE6E8; padding: 10px; border: 1px solid #ddd; border-radius: 5px;"}
## New concepts {.unnumbered}

-   **R Object**: Any type of data stored in R, such as a number, vector, map, or genome.

-   **Working Memory**: The temporary storage area in R where objects created during a session are stored.

-   **Vector**: An ordered sequence of values in R, allowing operations on multiple elements simultaneously.

-   **Function**: A predefined operation in R that performs a specific task using input arguments and returns an output. For example, `mean()` calculates the average of a numeric vector.

-   **Argument**: A value provided to a function to specify inputs or modify its behavior.

-   **Help File**: Documentation available for R functions and datasets, which includes usage, arguments, values, and examples.

-   **Script**: A text file containing R commands that can be executed to reproduce analyses.

-   **Comment**: A note within R code, marked with `#`, ignored by the R interpreter, used for explanations or reminders.
:::